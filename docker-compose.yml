version: '3.8'

services:
  # PostgreSQL - Metadata & Events Storage
  postgres:
    image: postgres:15-alpine
    container_name: learning-rec-postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: localdev
      POSTGRES_DB: recommendations
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d recommendations"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - learning-rec-network

  # Redis - Feature Cache & Session Storage
  redis:
    image: redis:7-alpine
    container_name: learning-rec-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - learning-rec-network

  # MinIO - S3-Compatible Object Storage (Local Dev)
  minio:
    image: minio/minio:latest
    container_name: learning-rec-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"  # Console
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - learning-rec-network

  # Kafka - Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: learning-rec-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - learning-rec-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: learning-rec-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - learning-rec-network

  # Milvus - Vector Database for ANN Search
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: learning-rec-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    networks:
      - learning-rec-network

  minio-milvus:
    image: minio/minio:latest
    container_name: learning-rec-minio-milvus
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /minio_data --console-address ":9002"
    volumes:
      - minio_milvus_data:/minio_data
    networks:
      - learning-rec-network

  milvus:
    image: milvusdb/milvus:v2.3.0
    container_name: learning-rec-milvus
    depends_on:
      - etcd
      - minio-milvus
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio-milvus:9000
      MINIO_ACCESS_KEY_ID: minioadmin
      MINIO_SECRET_ACCESS_KEY: minioadmin
    ports:
      - "19530:19530"
      - "9091:9091"  # Metrics
    command: milvus run standalone
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - learning-rec-network

  # MLflow - Experiment Tracking & Model Registry
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.7.1
    container_name: learning-rec-mlflow
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "5000:5000"
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://admin:localdev@postgres:5432/mlflow
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
    command: >
      mlflow server
      --backend-store-uri postgresql://admin:localdev@postgres:5432/mlflow
      --default-artifact-root s3://mlflow-artifacts/
      --host 0.0.0.0
      --port 5000
    networks:
      - learning-rec-network

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: learning-rec-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - learning-rec-network

  # Grafana - Visualization & Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: learning-rec-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - learning-rec-network

  # Prefect Server - Workflow Orchestration
  prefect-server:
    image: prefecthq/prefect:2.13-python3.11
    container_name: learning-rec-prefect-server
    ports:
      - "4200:4200"
    environment:
      PREFECT_SERVER_API_HOST: 0.0.0.0
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://admin:localdev@postgres:5432/prefect
    command: prefect server start --host 0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - learning-rec-network

  # Prefect Agent - Workflow Executor
  prefect-agent:
    image: prefecthq/prefect:2.13-python3.11
    container_name: learning-rec-prefect-agent
    depends_on:
      - prefect-server
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
    command: prefect agent start -q default
    networks:
      - learning-rec-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  minio_milvus_data:
  milvus_data:
  etcd_data:
  prometheus_data:
  grafana_data:

networks:
  learning-rec-network:
    driver: bridge
